// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  decks         Deck[]
  studySessions StudySession[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CardStatus {
  NEW
  LEARNING
  REVIEWING
  MASTERED
}

enum DifficultyRating {
  AGAIN
  HARD
  GOOD
  EASY
}

model Deck {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards Flashcard[]
}

model Flashcard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  kanji     String // Front side - Japanese characters
  meaning   String // Back side - Vietnamese meaning
  example   String? // Example sentence
  status    CardStatus @default(NEW)
  deckId    String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Spaced Repetition fields
  easinessFactor Float     @default(2.5)
  interval       Int       @default(0)
  repetitions    Int       @default(0)
  nextReviewDate DateTime  @default(now())
  lastReviewDate DateTime?

  deck          Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studySessions StudySession[]
}

model StudySession {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  flashcardId  String           @db.ObjectId
  rating       DifficultyRating
  responseTime Int? // Time taken to answer in milliseconds
  date         DateTime         @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcard Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
}
